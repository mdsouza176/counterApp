{"version":3,"sources":["components/AddCounter.js","components/CounterList.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["$","window","AddCounter","props","style","float","type","className","data-toggle","data-target","aria-hidden","id","margin","data-dismiss","htmlFor","placeholder","onClick","date","document","getElementById","value","event","time","match","alert","checkDate","addCounter","modal","CounterList","elements","counters","i","length","push","key","border","Header","App","uuidv4","require","useState","setCounters","counts","localStorage","getItem","useEffect","JSON","parse","currentDate","Date","counterDate","timeLeft","Math","ceil","getTime","updated","concat","Event","Left","setItem","stringify","Boolean","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3bda8d5e.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nconst $ = window.$;\r\nexport default function AddCounter(props) {\r\n    \r\n    \r\n    const addCounter = () => {\r\n        var date = document.getElementById(\"fullDate\").value;\r\n        var event = document.getElementById(\"event\").value;\r\n        if(checkDate(date)) {\r\n            props.addCounter(event, date);\r\n            $('#myModal').modal(\"hide\");\r\n        }\r\n    }\r\n    function checkDate(date, time)\r\n    {\r\n        // regular expression to match required date format\r\n        var re = /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/;\r\n\r\n        if(date === '' && !date.match(re)) {\r\n        alert(\"Invalid date format: \" + date);\r\n        return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button  style={{float:\"right\"}} type=\"button\" className=\"btn btn-primary mt-2\" data-toggle=\"modal\" data-target=\"#myModal\"><i className=\"fa fa-plus\" aria-hidden=\"true\"></i></button>\r\n            <br />\r\n            <br />\r\n            <div className=\"modal fade\" id=\"myModal\">\r\n                <div className=\"modal-dialog\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h1 style={{margin:\"auto\"}}>Counter Creator</h1>\r\n                            <button type=\"button\" style={{float:\"right\"}} data-dismiss=\"modal\" className=\"btn btn-danger float-right pt-0\">x</button>\r\n                        </div>\r\n                        <div className=\"form-inline\">\r\n                            <label htmlFor=\"event\">Event Name: </label>\r\n                            <div className=\"sm-4\">\r\n\r\n                            </div>\r\n                            <input placeholder=\"Event\" type=\"text\" id=\"event\" className=\"form-control\"/>\r\n                        </div>\r\n                        <div className=\"form-inline\">\r\n                            <label htmlFor=\"fullFate\">Date(Month, Day, year): </label>\r\n                            <input type=\"text\" placeholder=\"XX/XX/XXXX\" className=\"form-control\" id=\"fullDate\"></input>\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button className=\"btn btn-primary\" onClick={addCounter}>Create Timer</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nexport default function CounterList(props) {\r\n\r\n    var elements = []\r\n    \r\n    var counters = props.counters;\r\n    for(var i=0; i < props.counters.length; i++) {\r\n        elements.push(<tr key={counters[i][\"key\"]}>\r\n            <td></td>\r\n            <td>{counters[i][\"Event\"]}</td>\r\n            <td>{counters[i][\"Date\"]}</td>\r\n            <td>{counters[i][\"Left\"]}</td>\r\n        </tr>)\r\n    }\r\n    return (\r\n        <div>\r\n            <table border={2} className=\"table-dark\">\r\n                <tbody>\r\n                    <tr>\r\n                        <td>#</td>\r\n                        <td>EventName</td>\r\n                        <td>Date of Event</td>\r\n                        <td>Days Left Till Event</td>\r\n                    </tr>\r\n                    {elements}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div>\r\n            <div className=\"jumbotron\">\r\n                <h1 className=\"display-5\">Counter Creator</h1>\r\n                <p className=\"lead\">This is a simple counter creator for any major events.</p>\r\n                <hr className=\"my-2\" />\r\n                <p>Click the + and enter the name, and date of event and you'll create a countdown to that event.</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState, useEffect} from 'react';\nimport AddCounter from \"./components/AddCounter\";\nimport CounterList from \"./components/CounterList\"\nimport Header from \"./components/Header\"\n\nfunction App() {\n  const uuidv4 = require('uuid/v4');\n\n  //set of counters to show on the webpage\n  const [counters, setCounters] =useState([]);\n  var counts = localStorage.getItem(\"counters\");\n  useEffect(() => {\n    if(counts !== null) {\n      setCounters(JSON.parse(counts))\n    }\n  }, [counts]);\n\n\n  const addCounter = (event, date) => {\n    var currentDate = new Date()\n    var counterDate = new Date(date)\n    var timeLeft = Math.ceil((counterDate.getTime() - currentDate.getTime()) / (1000*3600*24));\n    \n    var updated = counters.concat({key:uuidv4(), Event: event, Date:date, Left:timeLeft });\n    setCounters(updated, localStorage.setItem(\"counters\", JSON.stringify(updated)))\n  }\n  \n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <Header></Header>\n        <AddCounter addCounter={addCounter}/>\n        \n        <CounterList counters={counters}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}